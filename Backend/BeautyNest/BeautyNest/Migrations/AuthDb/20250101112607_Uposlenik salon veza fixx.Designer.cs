// <auto-generated />
using System;
using BeautyNest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyNest.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250101112607_Uposlenik salon veza fixx")]
    partial class Uposleniksalonvezafixx
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautyNest.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb5c8fda-26ed-441b-89a2-ffc08e71926f",
                            Email = "fazlicamina02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Amina",
                            LastName = "Fazlić",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAZLICAMINA02@GMAIL.COM",
                            NormalizedUserName = "FAZLICAMINA02",
                            PasswordHash = "AQAAAAIAAYagAAAAEByZi6/y89KcuRooBKF7G8tZAmUir4zB28v/yuE4H4qB6eOMr0FSWieCGh/kCngPVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24f1140f-4f31-404f-9cca-5fdfcc2b0ec4",
                            TwoFactorEnabled = false,
                            UserName = "fazlicamina02"
                        },
                        new
                        {
                            Id = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dabec18-3e9c-4670-a579-9482cf9443a8",
                            Email = "adnah@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adna",
                            LastName = "Halilović",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADNAH@GMAIL.COM",
                            NormalizedUserName = "ADNAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEMZR3uKlgKggb0XXRGXYEjCJ4H9y+lkQTj6heiCGyL5eo8mj3/Ht+07iEHexsvBXkQ==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "ed41aba1-4436-4ae3-ba13-02a17d29fa7f",
                            TwoFactorEnabled = false,
                            UserName = "adnah"
                        },
                        new
                        {
                            Id = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c342e25-50ad-4297-951e-2b30245b7c13",
                            Email = "anidasabic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Anida",
                            LastName = "Šabić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANIDASABIC@GMAIL.COM",
                            NormalizedUserName = "ANIDASABIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEJtWilUi9fJ11kmmWkHsuw8o8RGkKQkaHosjI426+THwybUTNnzGPfr6ehr+9OGa3w==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "6dd3522f-ede6-46ee-a33e-fb44e6827cbd",
                            TwoFactorEnabled = false,
                            UserName = "anidasabic"
                        },
                        new
                        {
                            Id = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9904dce6-ecce-49d8-95d1-360fef6bd7bd",
                            Email = "aldinh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Aldin",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALDINH@GMAIL.COM",
                            NormalizedUserName = "ALDINH",
                            PasswordHash = "AQAAAAIAAYagAAAAEOmX4+AcjKXrbWyFHwvDcAhyc/0LAmK/dE7/6w8L1LRBfAe0dCx6uNruxxGYRg13Fw==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "20fd109d-fefc-40b4-b3af-40316ab48ecb",
                            TwoFactorEnabled = false,
                            UserName = "aldinh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            ConcurrencyStamp = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            Name = "Klijent",
                            NormalizedName = "KLIJENT"
                        },
                        new
                        {
                            Id = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            ConcurrencyStamp = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            Name = "Uposlenik",
                            NormalizedName = "UPOSLENIK"
                        },
                        new
                        {
                            Id = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            ConcurrencyStamp = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            Name = "Vlasnik",
                            NormalizedName = "VLASNIK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            RoleId = "70e860a1-ef1a-4c6c-aaad-ce85f38de238"
                        },
                        new
                        {
                            UserId = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
