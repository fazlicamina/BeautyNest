// <auto-generated />
using System;
using BeautyNest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyNest.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250113124412_novi uposlenici")]
    partial class noviuposlenici
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautyNest.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3787a2ca-b3be-4068-9bda-421e4b2c7399",
                            Email = "fazlicamina02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Amina",
                            LastName = "Fazlić",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAZLICAMINA02@GMAIL.COM",
                            NormalizedUserName = "FAZLICAMINA02",
                            PasswordHash = "AQAAAAIAAYagAAAAEN51HNm4Ab5FqTnkEb6PHLiOWlY6MWJOSF1cDxT0PfF9PYwkU5tjdpMoT5Qp6nQc1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "983a7e1d-34d8-449e-9de8-f70d4d609750",
                            TwoFactorEnabled = false,
                            UserName = "fazlicamina02"
                        },
                        new
                        {
                            Id = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4620228-5833-4450-90ce-9315bb21f9c9",
                            Email = "adnah@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adna",
                            LastName = "Halilović",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADNAH@GMAIL.COM",
                            NormalizedUserName = "ADNAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBssM1HlwAAII0PJedF6+vJWU72fR/EqHPzviSIonnxv3WyvnG9XD7jaz8fu+L7XQ==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "4105ace3-2e21-4b0b-b632-cb904fa98f97",
                            TwoFactorEnabled = false,
                            UserName = "adnah"
                        },
                        new
                        {
                            Id = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51511450-f0fd-463f-b293-41dae84419e9",
                            Email = "anidasabic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Anida",
                            LastName = "Šabić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANIDASABIC@GMAIL.COM",
                            NormalizedUserName = "ANIDASABIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPrP0MH38HRduHqolpGn3EtP/NjHZOAf6/ZRL0dy37BG8Ys1ibZBzE0zcUar+lfYQ==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "aee04862-df42-4aea-bbd7-f1f894e030d8",
                            TwoFactorEnabled = false,
                            UserName = "anidasabic"
                        },
                        new
                        {
                            Id = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84dacd11-b89c-4540-9044-85a6bc393dc4",
                            Email = "aldinh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Aldin",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALDINH@GMAIL.COM",
                            NormalizedUserName = "ALDINH",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkU0Lv0476KwmUnXXVT013FUeRyYwY9kWiRD1v2Z2WvRXPh7ZJuiFSdJdJLYqveAw==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "cbee35d4-85fa-4ced-b0c8-e27a024c2563",
                            TwoFactorEnabled = false,
                            UserName = "aldinh"
                        },
                        new
                        {
                            Id = "375bdc8f-0099-4009-8fe3-a69079ef38cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0106e17e-8064-4396-9471-bb00095d215e",
                            Email = "sara@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@GMAIL.COM",
                            NormalizedUserName = "SARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHV5TcIsh9SvFie+X5WHeTe7Ui40Yh03b5dvQ+ST1i7IGjGoRRudzSjH3ujBvBsaVA==",
                            PhoneNumberConfirmed = false,
                            SalonId = 2,
                            SecurityStamp = "af52556a-dc51-4fd8-a47a-ffab22d907a8",
                            TwoFactorEnabled = false,
                            UserName = "sara"
                        },
                        new
                        {
                            Id = "9b9687c2-256b-43d1-99fb-829bc64bad18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c5a8784-cdf4-4c00-be9b-ad23c98405a6",
                            Email = "azra@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Azra",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "AZRA@GMAIL.COM",
                            NormalizedUserName = "AZRA",
                            PasswordHash = "AQAAAAIAAYagAAAAENfjI/3QOACmtlFmlB/nyWeG2LKdSrezkxsMZTIi+Vdwq1+Q4WVUcwAud2yYnl9hhQ==",
                            PhoneNumberConfirmed = false,
                            SalonId = 3,
                            SecurityStamp = "572d5402-73d6-4a72-adec-e276a29c9e9e",
                            TwoFactorEnabled = false,
                            UserName = "azra"
                        },
                        new
                        {
                            Id = "0b4c05f1-06b6-431d-9e3a-3d4272ea3e05",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25f68d6f-a661-43df-9297-aa9ed86e3567",
                            Email = "samra@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Samra",
                            LastName = "Fazlić",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMRA@GMAIL.COM",
                            NormalizedUserName = "SAMRA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXBmeGKLYJlIqJ7Ce1dGbAEsH624dXwAdXMjcFgcqUGOLnQltyy8uChe4jEr19xpQ==",
                            PhoneNumberConfirmed = false,
                            SalonId = 4,
                            SecurityStamp = "9536492f-10f2-47e8-b6c6-4b844de7edc1",
                            TwoFactorEnabled = false,
                            UserName = "samra"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            ConcurrencyStamp = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            Name = "Klijent",
                            NormalizedName = "KLIJENT"
                        },
                        new
                        {
                            Id = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            ConcurrencyStamp = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            Name = "Uposlenik",
                            NormalizedName = "UPOSLENIK"
                        },
                        new
                        {
                            Id = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            ConcurrencyStamp = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            Name = "Vlasnik",
                            NormalizedName = "VLASNIK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            RoleId = "70e860a1-ef1a-4c6c-aaad-ce85f38de238"
                        },
                        new
                        {
                            UserId = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "9b9687c2-256b-43d1-99fb-829bc64bad18",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "375bdc8f-0099-4009-8fe3-a69079ef38cb",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "0b4c05f1-06b6-431d-9e3a-3d4272ea3e05",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
