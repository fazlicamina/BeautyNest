// <auto-generated />
using System;
using BeautyNest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyNest.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250101091153_fixes user modela")]
    partial class fixesusermodela
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautyNest.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce3ec36e-33a8-468c-a9ae-cd264337bd08",
                            Email = "fazlicamina02@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Amina",
                            LastName = "Fazlić",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAZLICAMINA02@GMAIL.COM",
                            NormalizedUserName = "FAZLICAMINA02",
                            PasswordHash = "AQAAAAIAAYagAAAAEF3hnYwLRJ6kTSXzSI1cTRolAUx8AQa0wu/fHlXU9bNNeAswPNijA+6Gs4SjbiVJaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11395f2e-c1ad-43dc-808d-dfb976c8f2ae",
                            TwoFactorEnabled = false,
                            UserName = "fazlicamina02"
                        },
                        new
                        {
                            Id = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e91a48b-b0e9-49fc-b6b4-2d10558e9eae",
                            Email = "adnah@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adna",
                            LastName = "Halilović",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADNAH@GMAIL.COM",
                            NormalizedUserName = "ADNAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEALmLGUA1gXFzX/dvGbJWGThQrH+KtUi0a6PoTs28PrZ9zyxfEk2uA+1MlF+zdiFNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e04ec03-15f5-47dd-b0be-98f0d34afc17",
                            TwoFactorEnabled = false,
                            UserName = "adnah"
                        },
                        new
                        {
                            Id = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40dbedd5-8b4e-45d4-9287-aef0cc2056ef",
                            Email = "anidasabic@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Anida",
                            LastName = "Šabić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANIDASABIC@GMAIL.COM",
                            NormalizedUserName = "ANIDASABIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUzuuRjBMd9hsiV+l4jz9VP3r3SxqvvGtUSDsGqyMDzHfLb3oXThYXmcBcjxynHDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7395b745-9e48-4b78-afed-1161778954e6",
                            TwoFactorEnabled = false,
                            UserName = "anidasabic"
                        },
                        new
                        {
                            Id = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92936bc5-1fd6-4005-b545-f89b563042d3",
                            Email = "aldinh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Aldin",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALDINH@GMAIL.COM",
                            NormalizedUserName = "ALDINH",
                            PasswordHash = "AQAAAAIAAYagAAAAEAc9sSUSGzeCd0NfvKKiuC4bCSxHBrGVRLLSQ9wUQotQXOzcrvH5xIgRP1ycvTECYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3657b323-caf1-4cc8-8637-eb5f3900d465",
                            TwoFactorEnabled = false,
                            UserName = "aldinh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            ConcurrencyStamp = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            Name = "Klijent",
                            NormalizedName = "KLIJENT"
                        },
                        new
                        {
                            Id = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            ConcurrencyStamp = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            Name = "Uposlenik",
                            NormalizedName = "UPOSLENIK"
                        },
                        new
                        {
                            Id = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            ConcurrencyStamp = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            Name = "Vlasnik",
                            NormalizedName = "VLASNIK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            RoleId = "70e860a1-ef1a-4c6c-aaad-ce85f38de238"
                        },
                        new
                        {
                            UserId = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
