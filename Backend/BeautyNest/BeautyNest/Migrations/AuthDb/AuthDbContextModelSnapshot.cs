// <auto-generated />
using System;
using BeautyNest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyNest.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautyNest.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab518e03-afe9-408a-bd4a-24f6fa4ead99",
                            Email = "fazlicamina02@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amina",
                            LastName = "Fazlić",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAZLICAMINA02@GMAIL.COM",
                            NormalizedUserName = "FAZLICAMINA02",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9m9IhJu3ZVRtYRu5oQiSmVYuZy+Q8avb/sVZCBjTB9OAd+D5hga9qkoyG3FeMk7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "070a643b-70f6-49d5-8c2b-c53f49a8bd4c",
                            TwoFactorEnabled = false,
                            UserName = "fazlicamina02"
                        },
                        new
                        {
                            Id = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6cf34f1-7f03-4bfb-a98d-c38da8cb6f84",
                            Email = "adnah@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adna",
                            LastName = "Halilović",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADNAH@GMAIL.COM",
                            NormalizedUserName = "ADNAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ4TS1JMcEyjmcujWC23r0XjmwUJ/qInRuc6N5cy8FJ00wxZB4rQei9pPXyanqYh6g==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "bff9b3ba-4dac-413e-902a-7d50f30f6211",
                            TwoFactorEnabled = false,
                            UserName = "adnah"
                        },
                        new
                        {
                            Id = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dee25ecb-b19b-4c99-8d5f-356c268a4737",
                            Email = "anidasabic@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anida",
                            LastName = "Šabić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANIDASABIC@GMAIL.COM",
                            NormalizedUserName = "ANIDASABIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDwihqKg33s0mk76KBCS6hMoxWClm0MsFkzEB121Qa2ajh/iJtz9XxsO3E+DFvI7Q==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "9afd23c4-9f2a-453a-ac29-97bd64f386ab",
                            TwoFactorEnabled = false,
                            UserName = "anidasabic"
                        },
                        new
                        {
                            Id = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb1e2d6b-3ef4-4a69-8a20-64a6dc1e3366",
                            Email = "aldinh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Aldin",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALDINH@GMAIL.COM",
                            NormalizedUserName = "ALDINH",
                            PasswordHash = "AQAAAAIAAYagAAAAENnmS8Bv6jLyhvJ5YjEPwB2FCZVztttffH/YQoN63EKGCd7At7/U8hOReT3ISniNxA==",
                            PhoneNumberConfirmed = false,
                            SalonId = 1,
                            SecurityStamp = "cf77b74a-0a37-4cd9-82d2-ca32c06ffb2f",
                            TwoFactorEnabled = false,
                            UserName = "aldinh"
                        },
                        new
                        {
                            Id = "375bdc8f-0099-4009-8fe3-a69079ef38cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36734ab6-dd11-466b-b441-a1e003001839",
                            Email = "sara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sara",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@GMAIL.COM",
                            NormalizedUserName = "SARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMPadxkJt5Z+74S0Ih+Ky5aQ1zfXOKWrTC1sWpThHVo0Bpxl4fKm92HS/ogHeugkuw==",
                            PhoneNumberConfirmed = false,
                            SalonId = 2,
                            SecurityStamp = "172cffb8-f0ad-4d60-b383-a06212b4db19",
                            TwoFactorEnabled = false,
                            UserName = "sara"
                        },
                        new
                        {
                            Id = "9b9687c2-256b-43d1-99fb-829bc64bad18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db1641aa-1ff5-42a2-9934-60fbc91d21cd",
                            Email = "azra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Azra",
                            LastName = "Hodžić",
                            LockoutEnabled = false,
                            NormalizedEmail = "AZRA@GMAIL.COM",
                            NormalizedUserName = "AZRA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaUCz1H6fUY65Vea2t7HnGjEeinV2ygnlcnpSmtd9QusVMHaAdst0mRt7amxUceVw==",
                            PhoneNumberConfirmed = false,
                            SalonId = 3,
                            SecurityStamp = "433239dd-324d-4b4b-9154-d075cfb8d670",
                            TwoFactorEnabled = false,
                            UserName = "azra"
                        },
                        new
                        {
                            Id = "0b4c05f1-06b6-431d-9e3a-3d4272ea3e05",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7f80b89-3089-45eb-9e7a-a45659f13861",
                            Email = "samra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Samra",
                            LastName = "Fazlić",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMRA@GMAIL.COM",
                            NormalizedUserName = "SAMRA",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4SE3BPJ7wVBe7Z/gBLMR9S2K2HVJbLpN6AKT+HW8sG/cZacTwasHJJMS0gNHFvzA==",
                            PhoneNumberConfirmed = false,
                            SalonId = 4,
                            SecurityStamp = "9d6fe49e-1fe2-4824-8a50-6eace8d154d4",
                            TwoFactorEnabled = false,
                            UserName = "samra"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            ConcurrencyStamp = "70e860a1-ef1a-4c6c-aaad-ce85f38de238",
                            Name = "Klijent",
                            NormalizedName = "KLIJENT"
                        },
                        new
                        {
                            Id = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            ConcurrencyStamp = "cbf297f5-0f16-4294-95cb-bd94ba401f0a",
                            Name = "Uposlenik",
                            NormalizedName = "UPOSLENIK"
                        },
                        new
                        {
                            Id = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            ConcurrencyStamp = "fff530b1-5200-4ccf-84e1-8840b57e1ab1",
                            Name = "Vlasnik",
                            NormalizedName = "VLASNIK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "41451580-acf7-422e-81b1-3bab4d8213a6",
                            RoleId = "70e860a1-ef1a-4c6c-aaad-ce85f38de238"
                        },
                        new
                        {
                            UserId = "b3b5c3e0-2f78-4f55-badb-d19d328c3240",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "e2e78953-bb8d-4b62-bb1a-d5e5bcb0af03",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "a9821a5d-6d8c-4b8b-8c68-cc6e52f1a529",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "9b9687c2-256b-43d1-99fb-829bc64bad18",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "375bdc8f-0099-4009-8fe3-a69079ef38cb",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        },
                        new
                        {
                            UserId = "0b4c05f1-06b6-431d-9e3a-3d4272ea3e05",
                            RoleId = "cbf297f5-0f16-4294-95cb-bd94ba401f0a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautyNest.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
